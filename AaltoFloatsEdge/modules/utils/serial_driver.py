# generated by VS Code IoT Tools extension IoT Edge module
# Copyright (c) Microsoft. All rights reserved.
# Licensed under the MIT license. See LICENSE file in the project root for
# full license information.

# 

import asyncio
import sys
import signal
import threading

import os
import time
import serial
import sys
import binascii
import inspect
import codecs
import math
import pynmea2
import pyudev

import logging 


# usb / serial - star USB to serial converter
USB_DEVICE_VENDOR = '067b'
USB_DEVICE_ID = '2303'

# this is the device id connected through usb - serial convertion box
# has to be connected to first plug
# Bus 001 Device 004: ID 0403:6011 Future Technology Devices International, Ltd FT4232H Quad HS USB-UART/FIFO IC
# ser = serial.Serial("/dev/ttyUSB1", baudrate=4800, timeout=0.5)
# there should be four serial ports behind same device - actually checking this

# /dev/ttyUSB0 GPS , Bus 001 Device 003: ID 067b:2303 Prolific Technology, Inc. PL2303 Serial Port
# /dev/ttyUSB1 CTD               0403:6011   - first
# /dev/ttyUSB2 ACOUSTIC MODEM    0403:6011   - second
# /dev/ttyUSB3 
# /dev/ttyUSB4 

# /dev/ttyACM0 arduino - e.g- Bus 001 Device 004: ID 2341:005e Arduino SA USB2.0 Hub

DEVICE_PORT = "/dev/ttyUSB1"    
DEVICE_BAUDRATE = 19200
DEVICE_TIMEOUT = 0.5
global device_ser


class SerialDriver:
    def __init__(self, device_vendor, device_id, port, device_baudrate, device_timeout):
            # define port for USB mode
        self.device_port = port
        PORTS = self.list_devices(device_vendor, device_id)
        logging.info("{}:{}".format("list of ports", PORTS))
        if PORTS != []:
            logging.info('USB DEVICE FOUND')
            self.usb_port = PORTS[port] # select first for device
        else:
            logging.info('NO RIGHT USB DEVICE FOUND')

        # usb device receiver
        self.serial = serial.Serial(self.usb_port, baudrate=device_baudrate, timeout=device_timeout)

    
    def is_usb_serial(self, device, vid=None, pid=None):
        # Checks device to see if its a USB Serial device.
        # The caller already filters on the subsystem being 'tty'.
        # If serial_num or vendor is provided, then it will further check to
        # see if the serial number and vendor of the device also matches.

        #pprint.pprint(dict(device.properties))

        # cannot be right if no vendor id
        if 'ID_VENDOR' not in device.properties:
            return False
        # searcing for right vendor
        if vid is not None:
            if device.properties['ID_VENDOR_ID'] != vid:
                logging.info(vid + ' not found  ' + device.properties['ID_VENDOR_ID'])
                return False

        if pid is not None:
            if device.properties['ID_MODEL_ID'] != pid:
                logging.info('not found')
                return False
        return True

    def list_devices(self, vid=None, pid=None):
        devs = []
        context = pyudev.Context()
        for device in context.list_devices(subsystem='tty'):
            if self.is_usb_serial(device, vid= vid,  pid = pid):
                devs.append(device.device_node)
        return devs


def main():
    if not sys.version >= "3.5.3":
        raise Exception( "The sample requires python 3.5.3+. Current version of Python: %s" % sys.version )
    
    # define port for USB mode
    serial_usb = SerialDriver(USB_DEVICE_VENDOR, USB_DEVICE_ID, 0, 4800, 0.5)


if __name__ == "__main__":
    logging.basicConfig()
    logging.getLogger().setLevel(os.environ.get("LOGLEVEL", "INFO"))
    main()
